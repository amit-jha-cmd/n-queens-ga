# -*- coding: utf-8 -*-
"""N Queens - GA

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/gist/devbihari/2c9bc433de09bdb907358ea9c1fb8cae/n-queens-ga.ipynb

# Genetic Algorithm: N Queens
---
Amit Jha ```1PE17IS011```

Manavi Sudhakar Pai ```1PE17IS045```


---
"""

import numpy as np
import argparse

# Initialization
def initiaize(n: int) -> np.array:
    # return an array of nxn vector
    print("Initialized")

def fitness(pop: np.array) -> int:
    # if not on any row/col/diagonal
    # return + sum(all pair combination)
    # else
    # return - sum (for all such pair) + sum (normal pairs)
    print("fitted")

def mutation(pop: np.array) -> np.array:
    # probabilistic mutation 
    # returns the population + mutated values
    print("mutated")

def crossover(pop: np.array, k : int) -> np.array:
    # select k best parents
    # generate offsprings from this set using
    # single point crossover
    # return pop + offsprings
    print("crossed")

def sort_pop(pop: np.array) -> np.array:
    # sorted the pop based on fitness score
    # return the top n*n gnomes from sorted pop
    print("sorted")

def start(n: int, cycles : int, ) -> np.array:
    # run the genetic algorithm for n cycles
    # return first solution from the final population
    print("started")
    
    
if __name__ == "__main__":
